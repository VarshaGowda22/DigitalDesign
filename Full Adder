// Full Adder - Gate Level
module fulladder( input a, b, cin, output s, cout);
  
  wire x1, x2, x3;
  
  xor(x1,a,b);
  xor(s,x1,cin);
  and(x2,x1,cin);
  and(x3,a,b);
  or(cout,x2,x3);
  
endmodule
 ############################################################################################################################################
// Full Adder - Data flow

module fulladder( input a, b, cin, output s, cout);
  
    assign s = a ^ b ^ cin;
    assign cout = (a&b) + cin & (a ^ b);
  
endmodule
##########################################################################################################################################
// Full Adder - behavioural 
module fulladder( input a, b, cin, output reg s, cout);
  
  always @ (a, b, cin) begin
    s = a ^ b ^ cin;
    cout = (a & b) | (b & cin) | (cin & a);
  end
  
endmodule
###############################################################################################################################################
// Test Bench
`timescale 1ns/1ns
module fa_tb();
  reg a,b,cin;
  wire s, cout;
  
  fulladder FA(.a(a), .b(b), .cin(cin), .s(s), .cout(cout));
  
  initial begin
    a = 0; b = 0; cin = 0;
    #1;
    a = 0; b = 0; cin = 1;
    #1;
    a = 0; b = 1; cin = 0;
    #1;
    a = 0; b = 1; cin = 1;
    #1;
    a = 1; b = 0; cin = 0;
    #1;
    a = 1; b = 0; cin = 1;
    #1;
    a = 1; b = 1; cin = 0;
    #1;
    a = 1; b = 1; cin = 1;
    #1;
  end
  
  initial begin
    $monitor("a = %b, b= %b, cin = %b, sum = %b, cout = %b", a, b, cin, s, cout);
    $dumpfile("dump.vcd");
    $dumpvars(1);
  end
  
endmodule

    

  
