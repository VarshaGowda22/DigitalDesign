// Half Adder
// Gate Level Modeling
module halfadder ( input a,b, output reg s, c);
  and(c,a,b);
  xor(s,a,b);
endmodule
##############################################################################################################################################
// Data Flow Level Modeling - Continuous Assignment
module halfadder ( input a,b, output reg s, c);
  
  assign s = a ^ b;
  assign c = a & b;  
  
endmodule
##################################################################################################################################
// Behavioural Modeling
module halfadder ( input a,b, output reg s, c);
  
  always @ (a, b) begin
    s = a ^ b;
    c = a & b;      
  end
  
endmodule

// Uisng Case statement
// Half Adder

module halfadder ( input a,b, output reg s, c);
  
  always @ (a, b) begin
    case({a,b})
      3'b00: s = 0;
      3'b01: s = 1;
      3'b10: s = 1;
      3'b11: s = 0;
      default : s = 0;
      endcase
      
    case({a,b})
      3'b00: c = 0;
      3'b01: c = 0;
      3'b10: c = 0;
      3'b11: c = 1;
      default : c = 0; 
    endcase
      
  end
  
endmodule
################################################################################################################################################3
//Test Bench
`timescale 1ns/1ns
module adder_tb();
  
  reg a, b;
  wire s, c;
  
  halfadder H_ADD( .a(a), .b(b), .s(s), .c(c));
  
  initial begin
    a = 0;
    b = 0;
    #1;
    a = 0;
    b = 1;
    #1;
    a = 1;
    b = 0;
    #1;
    a = 1;
    b = 1;
    #1;
  end
  
  initial begin
    
    $monitor("value of a = %b, b = %b,  S = %b, c = %b",a,b,s,c);
    $dumpfile("dump.vcd");
    $dumpvars(1);
  end
endmodule
